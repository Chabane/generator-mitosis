---
- name: Ensure kubeadm initialization
  command: "kubeadm init --token {{worker_token}} --api-advertise-addresses={{manager_ip}} --pod-network-cidr=10.244.0.0/16"

<% if (scheduleManager) { %>
- name: Schedule the manager
  command: "kubectl taint nodes --all dedicated-"
<% } %>

<% if (os === "ubuntu") { %>
- name: Ensure jq package is installed
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - jq
<% } %>
<% if (os === "centos") { %>
- name: Ensure jq package is installed
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - jq
<% } %>
- name: Set --advertise-address flag in kube-apiserver static pod manifest (workaround for https://github.com/kubernetes/kubernetes/issues/34101)
  shell: "jq '.spec.containers[0].command |= .+ [\"--advertise-address={{manager_ip}}\"]' /etc/kubernetes/manifests/kube-apiserver.json > /tmp/kube-apiserver.json && mv /tmp/kube-apiserver.json /etc/kubernetes/manifests/kube-apiserver.json" 
    
- name: Set --proxy-mode flag in kube-proxy daemonset (workaround for https://github.com/kubernetes/kubernetes/issues/34101)
  shell: "kubectl -n kube-system get ds -l 'component=kube-proxy' -o json | jq '.items[0].spec.template.spec.containers[0].command |= .+ [\"--proxy-mode=userspace\"]' | kubectl apply -f - && kubectl -n kube-system delete pods -l 'component=kube-proxy'"
  register: proxy
  until: proxy.rc == 0
  retries: 20
  delay: 10

- name: Kubectl config
  command: "kubectl config set-cluster <%= appName %>-cluster --server=http://localhost:8080 && kubectl config set-context <%= appName %> --cluster=<%= appName %>-cluster && kubectl config use-context <%= appName %>"

- name: Ensure <%= appName %> networks
  file:
    path: "{{<%= appName %>_home}}/networks"
    state: directory
    mode: 0700

- name: Copy <%= appName %> networks 
  copy:
    src: files/networks/{{ item }}
    dest: "{{<%= appName %>_home}}/networks/{{ item }}"
    mode: 0700
  with_items:
    - kube-flannel.yml

- name: Start flannel
  command : "kubectl apply -f {{<%= appName %>_home}}/networks/kube-flannel.yml"
  register: network
  until: network.rc == 0
  retries: 20
  delay: 10

- name: Ensure <%= appName %> namespaces
  file:
    path: "{{<%= appName %>_home}}/namespaces"
    state: directory
    mode: 0700

- name: Ensure <%= appName %> namespaces
  file:
    path: "{{<%= appName %>_home}}/namespaces"
    state: directory
    mode: 0700

- name: Copy <%= appName %> namespaces 
  copy:
    src: files/services/{{ item }}
    dest: "{{<%= appName %>_home}}/namespaces/{{ item }}"
    mode: 0700
  with_items:
    - namespace.yml

- name: Create namespace <%= appName %>
  command: "kubectl create -f {{<%= appName %>_home}}/namespaces/"  

- name: Ensure <%= appName %> applications
  file:
    path: "{{<%= appName %>_home}}/applications"
    state: directory
    mode: 0700

- name: Copy <%= appName %> applications 
  copy:
    src: files/services/{{ item }}
    dest: "{{<%= appName %>_home}}/applications/{{ item }}"
    mode: 0700
  with_items:
    - artifactory.yml
    - sonarqube.yml
    - jenkins.yml
    - traefik.yml

<% if (tools.indexOf("traefik") > -1) { %> 
- name: Launch traefik
  command : "kubectl create -f {{<%= appName %>_home}}/applications/traefik.yml"
<% } %>   

<% if (tools.indexOf("sonarqube") > -1) { %>  
- name: Launch sonarqube
  command : "kubectl create -f {{<%= appName %>_home}}/applications/sonarqube.yml"
<% } %>   
  
<% if (tools.indexOf("artifactory") > -1) { %> 
- name: Launch artifactory
  command : "kubectl create -f {{<%= appName %>_home}}/applications/artifactory.yml"
<% } %>   

<% if (tools.indexOf("jenkins") > -1) { %> 
- name: Launch jenkins
  command : "kubectl create -f {{<%= appName %>_home}}/applications/jenkins.yml"
<% } %>   


