---      

<% if (tools.indexOf("sonarqube") > -1) { %>  
- name: "Create service sonarqube"
  shell: >
         docker service create \
           --name sonarqube \
           --log-driver=gelf \
           --log-opt gelf-address=udp://{{ manager_ip }}:12201 \           
           --label traefik.port=9000 \
           --label traefik.frontend.rule=Host:sonarqube.<%= appName %> \
           --publish 9000:9000 \
           --network <%= appName %>-net \
           --replicas 2 \
           mitosis/sonarqube:1.0.0-alpha.0
<% } %>     

<% if (tools.indexOf("artifactory") > -1) { %>                        
- name: "Create service artifactory"
  shell: >
         docker service create \
           --log-driver=gelf \
           --log-opt gelf-address=udp://{{ manager_ip }}:12201 \         
           --name artifactory \
           --label traefik.port=9999 \
           --label traefik.frontend.rule=Host:artifactory.<%= appName %> \
           --publish 9999:8080 \
           --network <%= appName %>-net \
           --replicas 2 \
           mitosis/artifactory:1.0.0-alpha.0
<% } %>  

<% if (!defaultMicroService && tools.indexOf("jenkins") > -1) { %>
- name: "Create service jenkins master"
  shell: >
         docker service create \
           --log-driver=gelf \
           --log-opt gelf-address=udp://{{ manager_ip }}:12201 \         
           --name jenkins \
           --label traefik.port=8082 \
           --label traefik.frontend.rule=Host:jenkins.<%= appName %> \
           --env MANAGER_IP="{{ manager_ip }}" \
           --env APP_NAME="<%= appName %>" \
           --mount "type=bind,target=/var/run/docker.sock,src=/var/run/docker.sock" \
           --mount "type=bind,target=/usr/bin/docker,src=/usr/bin/docker" \
           --publish 50000:50000 \
           --publish 8082:8080 \
           --network <%= appName %>-net \
           --replicas 2 mitosis/jenkins:default1.0.0-alpha.1
<% } %>   
<% if (defaultMicroService && tools.indexOf("jenkins") > -1) { %> 
- name: "Create service jenkins master"
  shell: >
         docker service create \     
           --name jenkins \
           --log-driver=gelf \
           --log-opt gelf-address=udp://{{ manager_ip }}:12201 \
           --label traefik.port=8082 \
           --label traefik.frontend.rule=Host:jenkins.<%= appName %> \
           --env MANAGER_IP="{{ manager_ip }}" \
           --env APP_NAME="<%= appName %>" \
           --mount "type=bind,target=/var/run/docker.sock,src=/var/run/docker.sock" \
           --mount "type=bind,target=/usr/bin/docker,src=/usr/bin/docker" \
           --mount "type=volume,target=/var/jenkins_home,src=jenkins" \
           --publish 50000:50000 \
           --publish 8082:8080 \
           --network <%= appName %>-net \
           --replicas 1 mitosis/jenkins:1.0.0-alpha.3

- name: "Create service zookeeper"
  shell: > 
         docker service create \
         --name zookeeper \
         --log-driver=gelf \
         --log-opt gelf-address=udp://{{ manager_ip }}:12201 \         
         --publish 2181:2181 \
         --network microservices-net \
         --replicas 1 \
         zookeeper:3.4

- name: "Create service kafka"
  shell: > 
         docker service create \
         --name kafka \
         --log-driver=gelf \
         --log-opt gelf-address=udp://{{ manager_ip }}:12201 \         
         --publish 9092:9092 \
         --mount "type=bind,target=/var/run/docker.sock,src=/var/run/docker.sock" \
         --env KAFKA_ADVERTISED_HOST_NAME={{ manager_ip }} \
         --env KAFKA_ADVERTISED_PORT=9092 \
         --env KAFKA_LISTENERS="PLAINTEXT://:9092" \
         --env KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://{{ manager_ip }}:9092" \
         --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
         --env KAFKA_CREATE_TOPICS=topic-mitosis:1:1 \
         --network microservices-net \
         --replicas 1 \
         wurstmeister/kafka:0.11.0.0

- name: "Create service mongo"
  shell: > 
         docker service create \
         --name mongo \
         --log-driver=gelf \
         --log-opt gelf-address=udp://{{ manager_ip }}:12201 \         
         --publish 27017:27017 \
         --network microservices-net \
         --mount "type=volume,target=/data/db,src=mongo" \
         --replicas 1 \
         mongo:3.4

- name: "Create service cassandra"
  shell: > 
         docker service create \
         --name cassandra \
         --log-driver=gelf \
         --log-opt gelf-address=udp://{{ manager_ip }}:12201 \         
         --publish 9042:9042 \
         --network microservices-net \
         --env CASSANDRA_BROADCAST_ADDRESS=cassandra \
         --mount "type=volume,target=/var/lib/cassandra,src=cassandra" \
         --replicas 1 \
         cassandra:3
<% } %>
